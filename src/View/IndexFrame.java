/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Untils.NoDoubleClickUtils;
import bean.DataModel;
import bean.MyVector;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author cjm
 */
public class IndexFrame extends javax.swing.JFrame implements ListSelectionListener {

    //private Map<String, String> userMap;
    private MyVector userVector;
    private String username;
    private String group;
    private  static Map<String,SingleFrame> singleFrameMap = new HashMap<String, SingleFrame>();//用户名和单人聊天Frame

    public static Map<String, SingleFrame> getSingleFrameMap() {
        return singleFrameMap;
    }

    public static void setSingleFrameMap(Map<String, SingleFrame> singleFrameMap) {
        IndexFrame.singleFrameMap = singleFrameMap;
    }
    
    /**
     * Creates new form indexFrame
     */
    public IndexFrame(String username, MyVector userVector, String group) {
        super();
        this.userVector = userVector;
        this.username = username;
        this.group = group;
        initComponents();
        userList = new JList(userVector.getListVector());
        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        userList.addListSelectionListener(this);
        jScrollPane1.setViewportView(userList);
        this.setTitle("P2P聊天系统:" + group);
        userList.setFont(new Font("字体", Font.PLAIN, 30));
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension size = this.getSize();
        int x = (screenSize.width - size.width);
        int y = 0;
        this.setLocation(x, y);
        // 设置头像
        //touxiang.paintComponents(null);
        lb_username.setText(username);
        this.setVisible(true);

    }
    @Override
     protected void processWindowEvent(WindowEvent e) {
         if(e.getID() == WindowEvent.WINDOW_CLOSING){
             if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(e.getWindow(), "是否确定要退出聊天系统？", "提示",
                        JOptionPane.OK_CANCEL_OPTION)) {
                    e.getWindow().setVisible(false);
                    System.exit(0);
                }else {
                 return;
             }
         }
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb_username = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lb_username.setFont(new java.awt.Font("宋体", 0, 26)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 164, Short.MAX_VALUE)
                .addComponent(lb_username, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lb_username, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        // TODO add your handling code here:
        if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(this, "是否确定要退出聊天系统？", "提示",
                JOptionPane.OK_CANCEL_OPTION)) {
            this.setVisible(false);
            System.exit(0);
        }

    }

    public synchronized void updataMyIndex() {
        userList.setListData(userVector.getListVector());
        //userList.updateUI();
    }
    private JList userList;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lb_username;
    // End of variables declaration//GEN-END:variables
    public JList getUserList() {
        return this.userList;
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        
        if (NoDoubleClickUtils.isDoubleClick()) {
            if(this.getUserList().getSelectedIndex()==0){
                return;
            }
            if (e.getValueIsAdjusting() == true && this.getUserList().getSelectedIndex()>=0) {
                try {
                    String ip = InetAddress.getLocalHost().getHostAddress();
                    new SingleFrame(this.username,userVector.get(this.getUserList().getSelectedIndex()).getKey()).setVisible(true);
                    userList.clearSelection();
                } catch (UnknownHostException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
}
